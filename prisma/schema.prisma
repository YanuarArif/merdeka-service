generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  provider      String?   @default("credentials")
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  reviews       Review[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("verification_tokens")
}

// Optional: Keep this if you use it elsewhere or for app-level validation
enum Category {
  LAPTOP
  SMARTPHONE
  PRINTER
}

model Product {
  id          String   @id @default(cuid())
  name        String   @map("name")
  description String?  @map("description")
  price       Decimal  @map("price")
  stock       Int      @default(0) @map("stock")
  imageUrl    String?  @map("image_url")
  category    String?  @map("category") // Main category, e.g., "Laptop"
  subCategory String?  @map("sub_category") // Subcategory, e.g., "Gaming Laptop"
  attributes  Json?    @map("attributes")
  weight      Float?   @map("weight")
  length      Float?   @map("length")
  breadth     Float?   @map("breadth")
  width       Float?   @map("width")
  sku         String?  @map("sku")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews     Review[]

  @@index([category]) // Index on category for faster filtering
  @@map("products")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // Optional: one review per user per product
  @@index([productId])
  @@map("reviews")
}
